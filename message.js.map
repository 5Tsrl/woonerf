{"version":3,"sources":["message.js"],"names":["setMessages","getMessage","dbg","KeysUsed","newMessages","messages","process","env","MESSAGES","JSON","parse","key","defaultMessage","parameters","add","msg","result","replaceMessage","data","replace","RegExp","join","m"],"mappings":";;;;;;;;;;;;;;;;;;;QAcgBA,W,GAAAA,W;kBAYQC,U;;AAzBxB;;;;AACA;;;;;;AAEA,IAAMC,MAAM,qBAAM;;AAElB;;;AAFY,CAAZ,CAKO,IAAMC,8BAAW,mBAAjB;;AAEP;;;AAGO,SAASH,WAAT,CAAsBI,WAAtB,EAAmC;AACxCC,aAAWD,WAAX;AACD;;AAED,IAAIC,WAAW,EAAf;AACA,IAAIC,QAAQC,GAAR,CAAYC,QAAhB,EAA0B;AACxBR,cAAYS,KAAKC,KAAL,CAAWJ,QAAQC,GAAR,CAAYC,QAAvB,CAAZ;AACD;;AAED;;;AAGe,SAASP,UAAT,CAAqBU,GAArB,EAAkCC,cAAlC,EAAoEC,UAApE,EAAiG;AAC9G,MAAID,kBAAkB,IAAtB,EAA4B;AAC1BA,qBAAiB,EAAjB;AACAC,iBAAa,EAAb;AACD,GAHD,MAGO,IAAI,QAAOD,cAAP,uDAAOA,cAAP,OAA0B,QAA9B,EAAwC;AAC7CC,iBAAaD,cAAb;AACAA,qBAAiB,EAAjB;AACD;;AAED;AACAT,WAASW,GAAT,CAAaH;;AAEb;AAFA,IAGA,IAAMI,MAAM,mBAAIV,QAAJ,EAAcM,GAAd,EAAmBC,cAAnB,CAAZ;AACA,MAAMI,SAASH,aAAaI,eAAeF,GAAf,EAAoBF,UAApB,CAAb,GAA+CE,GAA9D;AACAb,MAAIS,GAAJ,EAASK,MAAT;AACA,SAAOA,MAAP;AACD;;AAED,SAASC,cAAT,CAAyBF,GAAzB,EAA8BG,IAA9B,EAAoC;AAClC,SAAOH,IAAII,OAAJ,CAAY,IAAIC,MAAJ,CAAW,UAAU,oBAAYF,IAAZ,EAAkBG,IAAlB,CAAuB,GAAvB,CAAV,GAAwC,MAAnD,EAA2D,GAA3D,CAAZ,EAA6E,UAACC,CAAD,EAAIX,GAAJ;AAAA,WAAYO,KAAKP,GAAL,KAAaW,CAAzB;AAAA,GAA7E,CAAP;AACD","file":"message.js","sourcesContent":["// @flow\nimport debug from 'debug'\nimport get from 'lodash/get'\n\nconst dbg = debug('woonerf:message')\n\n/**\n * Expose a Set of all the keys used\n */\nexport const KeysUsed = new Set()\n\n/**\n * Set the messages object\n */\nexport function setMessages (newMessages) {\n  messages = newMessages\n}\n\nlet messages = {}\nif (process.env.MESSAGES) {\n  setMessages(JSON.parse(process.env.MESSAGES))\n}\n\n/**\n * Requires a key, defaultMessage and parameters are optional\n */\nexport default function getMessage (key: string, defaultMessage?: string | Object, parameters?: Object): string {\n  if (defaultMessage == null) {\n    defaultMessage = ''\n    parameters = {}\n  } else if (typeof defaultMessage === 'object') {\n    parameters = defaultMessage\n    defaultMessage = ''\n  }\n\n  // Store the used key\n  KeysUsed.add(key)\n\n  // Get the message with \"lodash/get\" to allow nested keys ('noun.action' => {noun: {action: 'value'}})\n  const msg = get(messages, key, defaultMessage)\n  const result = parameters ? replaceMessage(msg, parameters) : msg\n  dbg(key, result)\n  return result\n}\n\nfunction replaceMessage (msg, data) {\n  return msg.replace(new RegExp('%\\\\((' + Object.keys(data).join('|') + ')\\\\)', 'g'), (m, key) => data[key] || m)\n}\n"]}